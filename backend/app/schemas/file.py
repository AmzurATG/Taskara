from datetime import datetime
from typing import Optional
from uuid import UUID
from pydantic import BaseModel, Field


class FileBase(BaseModel):
    file_name: str = Field(..., min_length=1, max_length=255)
    storage_path: str = Field(..., min_length=1)
    file_hash: Optional[str] = None
    file_size: Optional[int] = None


class FileCreate(BaseModel):
    file_name: str = Field(..., min_length=1, max_length=255)
    # storage_path will be generated by the service


class FileUploadResponse(BaseModel):
    id: UUID
    project_id: UUID
    file_name: str
    storage_path: str
    uploaded_by: UUID
    file_hash: Optional[str] = None
    file_size: Optional[int] = None
    created_at: datetime
    message: str = "File uploaded successfully"

    class Config:
        from_attributes = True


class FileInDBBase(FileBase):
    id: UUID
    project_id: UUID
    uploaded_by: UUID
    created_at: datetime

    class Config:
        from_attributes = True


class File(FileInDBBase):
    pass


class FileInDB(FileInDBBase):
    pass
